import java.io.*;
import java.net.*;
import javax.net.ssl.*;
import java.util.*;
import java.text.*;

import ngat.util.*;
import ngat.util.logging.*;

/** Client to send requests to an Offline Control server. P2ML requests
 * generated by another program/script are read from a file. After making
 * the TCP connection to the offline server, the request is sent. Acks 
 * received from the server are used to determine timeout period. Responses
 * and error messages are written to stdout, stderr or nominated files.
 */
public class OfflineClient extends Thread {

    /** Error code: Indicates an argument parsing problem.*/
    public static final int PARSE_ERROR   = 710101;
    
    /** Error code: Indicates that connection could not be made to OCR server.*/
    public static final int CONNECT_ERROR = 710102;

    /** Error code: Indicates a problem locating or opening the request file.*/
    public static final int FILE_ERROR    = 710103;

    /** Error code: Indicates an i/o problem with opening communications streams.*/
    public static final int IO_ERROR      = 710104;

    /** Error code: Indicates a problem reading from the request file.*/
    public static final int READ_ERROR    = 710105;

    /** Error code: Indicates an i/o problem sending the request.*/
    public static final int SEND_ERROR    = 710106;
 
    /** Error code: Indicates a socket i/o problem.*/
    public static final int SOCKET_ERROR  = 710107;

   
    /** Default file log level.*/
    public static final int DEFAULT_FILE_LOG_LEVEL = 0;

    /** Default console log level.*/
    public static final int DEFAULT_CONSOLE_LOG_LEVEL = 0;
   
    /** Default socket timeout.*/
    public static final int DEFAULT_TIMEOUT = 60000;

    /** Minimum socket timeout allowed.*/
    public static final int MIN_TIMEOUT = 10000;
 
    /** Default OCR host .*/
    public static final String DEFAULT_HOST = "localhost";
    
    /** Default OCR port.*/
    public static final int DEFAULT_PORT = 5555;
    
    /** File to read request XML from.*/
    protected File xmlFile;
    
    /** Offline server host address.*/
    protected String host;
    
    /** Offline server host port.*/
    protected int port;

    /** True if secure connection.*/
    protected boolean secure = false;

    /** File to dump response to.*/
    protected File responseFile;
    
    /** True if output to stdout else to stderr.*/
    protected boolean dumpToStdout;
    
    /** True if output to file.*/
    protected boolean dumpToFile;
    
    /** Socket output stream.*/
    PrintStream out = null;
    
    /** Socket input stream.*/
    BufferedReader in = null;
    
    /** Request file input stream.*/
    BufferedReader fin = null;
    
    /** Dump file output stream.*/
    PrintStream dump;
    
    /** Logger.*/
    Logger logger;
    
    /** Create a client to send requests to the Offline server.    
     */
    public OfflineClient() {
	logger = LogManager.getLogger("OCR");
    }
    
    /** Usage info.*/
    public static void usage() {
	System.err.println("Usage:    java [jvm options] OfflineClient [args]"+
			   "\n"+
			   "\nWhere args [defaults] include:"+
			   "\n"+ 
			   "\n     Mandatory."+
			   "\n"+
			   "\n     @host               : OCR Host name/address. [localhost]"+
			   "\n     @port               : OCR port. [5555]"+
			   "\n     @xml-file           : File containing the XML request."+
			   "\n     @secure             : If the connection is secure."+
			   "\n"+
			   "\n     Optional."+
			   "\n"+
			   "\n     @log-file           : File to log messages to."+
			   "\n     @file-log-level     : File log level (0-5) [0=off]"+
			   "\n     @console-log-level  : Console log level (0-5) [0=off]"+			   
			   "\n     @response-file      : File to dump response to."+
			   "\n     @stdout             : Dump reponse to stdout (otherwise stderr)."+
			   "\n"+
			   "\n     Jvm options."+
			   "\n"+
			   "\n     -Dcp.delim=<symbol> : Selects a different arg delimiter than @ "+
			   "\n"+
			   "\n Note: If a console log is used then this goes to stderr.");
	
    }
    
    /** Invoke client with supplied args.*/
    public static void main(String args[]) {

	CommandParser parser = new CommandParser("@");

	try {
	    parser.parse(args);
	} catch (ParseException px) {
	    System.err.println("Error parsing command arguments: "+px);
	    return;
	}

	ConfigurationProperties params = parser.getMap();

	OfflineClient client = new OfflineClient();
	
	try {
	    client.configure(params);	
	}  catch (Exception e) {
	    System.err.println("OCR Client: Configuration error"); 
	    e.printStackTrace();
	    //usage();
	    return;
	}
	
	try {
	    client.exec();
	}  catch (Exception e) {
 	    System.err.println("OCR Client: Execution failed: ");
	    e.printStackTrace();
	    System.exit(1);
	}
	
    }
	
    /** Configure from properties.*/
    protected void configure(ConfigurationProperties params) 
	throws IOException, IllegalArgumentException {

	logger.setLogLevel(Logging.ALL);

	int cl = params.getIntValue("console-log-level", DEFAULT_CONSOLE_LOG_LEVEL);
	
	if (cl == Logging.ALL || cl > 0) {
	    LogHandler handler = new ConsoleLogHandler(new BogstanLogFormatter());
	    handler.setLogLevel(cl);
	    logger.addHandler(handler);
	}
	
	String logFileName = params.getProperty("log-file");

	int fl = params.getIntValue("file-log-level", DEFAULT_FILE_LOG_LEVEL);
	
	if (logFileName != null) {
	    try {
		LogHandler handler = new FileLogHandler(logFileName, 
							new BogstanLogFormatter(),  
							FileLogHandler.DAILY_ROTATION);
		handler.setLogLevel(fl);
		logger.addHandler(handler);
	    } catch (IOException iox) {
		System.err.println("Unable to open logfile: "+logFileName+" :"+iox);
	    }
	}
	
	
	host = params.getProperty("host", DEFAULT_HOST);

	port = params.getIntValue("port", DEFAULT_PORT);

	secure = (params.getProperty("secure", "true").equals("true"));
	
	String responseFileName = params.getProperty("response-file");
	
	if (responseFileName != null && ! responseFileName.equals("")) {
	    responseFile = new File(responseFileName);
	    dumpToFile = true;
	  
	    dump =  new PrintStream(new FileOutputStream(responseFile));
	    
	}

	dumpToStdout = (params.getProperty("stdout") != null);

	String xmlFileName = params.getProperty("xml-file");
	
	if (xmlFileName != null && ! xmlFileName.equals("")) {
	    xmlFile = new File(xmlFileName);
	}

	if (xmlFile == null)
	    throw new IllegalArgumentException("No xml file was specified");

	if (! xmlFile.exists())
	    throw new IllegalArgumentException("XML request file: "+xmlFile.getPath()+" does not exist.");

	if (xmlFile.length() == 0)
	    throw new IllegalArgumentException("XML request file: "+xmlFile.getPath()+" has zero length.");
	
    }

    /** Sends the request in specified file and awaits response.*/
    public void exec() { 
	
	Socket socket = null;	

	if (secure) {
	    try {
		SSLSocketFactory sf = (SSLSocketFactory)SSLSocketFactory.getDefault();
		socket = sf.createSocket(host,port);
		logger.log(2,"Opened secure connection to: "+
			   socket.getInetAddress().getHostName()+
			   " : "+socket.getPort()); 
	    } catch (IOException e) { 
		error(CONNECT_ERROR, "Error opening secure socket connection: "+e);
		return;
	    }
	} else {
	    try {
		socket = new Socket(host, port);
		logger.log(2,"Opened std connection to: "+
			   socket.getInetAddress().getHostName()+
			   " : "+socket.getPort());
	    } catch (IOException e) { 
		error(CONNECT_ERROR, "Error opening std socket connection: "+e);
		return;
	    }
	}

	try {
	    fin = new BufferedReader(new FileReader(xmlFile));
	    logger.log(2,"Opened file input stream");
	} catch (IOException e) {
	    error(FILE_ERROR, "Error opening request file: "+e);
	    return;
	}
	
	try {
	    out = new PrintStream(socket.getOutputStream()); 
	    logger.log(2,"Opened output stream to server");	    
	    in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
	    logger.log(2,"Opened input stream from server");
	} catch (IOException e) {
	    error(IO_ERROR, "Error opening socket i/o streams: "+e);
	    return;
	}
	
	// Keep reading from file.
	boolean done = false;
	String text = null;
	while (!done) {
	    try {
		text = fin.readLine();
		if (text == null) break;
		logger.log(3,"Read:["+text+"]");		
	    } catch (IOException e) {
		error(READ_ERROR, "Error reading from file : "+e);
		break;
	    }
	    
	    out.println(text);
	    out.flush();
	    
	    if (out.checkError())
		error(SEND_ERROR, "Error sending : ");
	    
	}
		
	logger.log(3, "\n---------------------------------------------"+
		   "\n        SERVER RESPONSE - START            "+ 
		   "\n---------------------------------------------");

	done = false;
	while (!done) { 

	    try {
		String reply = in.readLine();			
		if (reply == null) {	  		  
		    logger.log(3,"\n---------------------------------------------"+
			       "\n        SERVER RESPONSE - END              "+ 
			       "\n---------------------------------------------"); 
		    return;
		}

		if (dumpToStdout)
		    System.out.println(reply);
		else
		     System.err.println(reply);
		
		if (dumpToFile && responseFile != null)
		    dump.println(reply);
		
		if (reply.indexOf("<timeout>") != -1) {
		    // We probably have an ACK timeout - reset the Socket.SO_TIMEOUT here.
		    try {
			// What a fecker to parse in java.....
			int d1 = reply.indexOf(">");
			int d2 = reply.lastIndexOf("<");
			String to = reply.substring(d1+2, d2).trim();
			int ito = 60000;
			try {
			    ito = Integer.parseInt(to);
			} catch (Exception e) {System.err.println("GRR: ["+to+"] :"+e);}
			
			if (ito < MIN_TIMEOUT) ito = DEFAULT_TIMEOUT;

			socket.setSoTimeout(ito);
			logger.log(2, "Adjusted SO_TIMEOUT: "+ito);
		    } catch (IOException iox) {
			error(SOCKET_ERROR, "Error adjusting SO_TIMEOUT on socket in response to ACK : ");
		    }
		}

		if (reply.indexOf("/p2ml:document") != -1) {
		    logger.log(3,"\n---------------------------------------------"+
			       "\n        SERVER RESPONSE - END              "+ 
			       "\n---------------------------------------------"); 
		    return;
		}
		
	    } catch (IOException iox) {
		logger.log(1,"Read::Error reading from server: "+iox);
		error(SOCKET_ERROR, "Error reading from serveer: "+iox);
		return;
	    }
	}
		

	try {
	    fin.close();
	    out.close();
	    dump.close();
	} catch (IOException e) {
	    logger.log(1,"Read::Error closing file or sending : "+e);
	    return;
	}
	
    }
    
    protected void error(int code, String message) {
	String reply = "<p2ml:document>"+
	    "\n  <p2ml:error>"+
	    "\n    <code>"+code+"</code>"+
	    "\n    <message>"+message+"</message>"+
	    "\n  </p2ml:error>"+
	    "\n</p2ml:document>";
	
	    if (dumpToStdout)
		System.out.println(reply);
	    else
		System.err.println(reply);
	
	if (dumpToFile && responseFile != null)
	    dump.println(reply);
	
    }
   
}






