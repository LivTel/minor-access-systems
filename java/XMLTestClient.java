import java.io.*;
import java.net.*;
import java.util.*;

import java.applet.*;

/** Client to send requests to an Offline Control server. P2ML requests
 * generated by another program/script are read from a file. After making
 * the TCP connection to the offline server, the request is sent. Acks 
 * received from the server are used to determine timeout period, responses
 * and error messages are written to stdout, stderr or nominated files.
 */
public class XMLTestClient extends Thread {

    /** Error code: Indicates a problem parsing the command arguments.*/
    public static final int COMAMND_ERROR =  1;

    /** Error code: Indicates that connection could not be made to OCR server.*/
    public static final int CONNECT_ERROR = 2;

    /** Error code: Indicates a problem locating or opening the request file.*/
    public static final int FILE_ERROR = 3;

    /** Error code: Indicates an i/o problem with opening communications streams.*/
    public static final int IO_ERROR = 4;

    /** Error code: Indicates a problem reading from the request file.*/
    public static final int READ_ERROR = 5;

    /** Error code: Indicates an i/o problem sending the request.*/
    public static final int SEND_ERROR = 6;


    /** File to read request XML from.*/
    protected String xmlFile;

    /** Offline server host address.*/
    protected String host;

    /** Offline server host port.*/
    protected int port;

    /** File to dump response to.*/
    protected File responseFile;

    /** File to dump error messages to.*/
    protected File errorFile;

    /** True if output to stdout else to stderr.*/
    protected boolean dumpToStdout;

    /** True if output should be sent to files.*/
    protected boolean dumpToFile;

    /** Socket output stream.*/
    PrintStream out = null;

    /** Socket input stream.*/
    BufferedReader in = null;

    /** Request file input stream.*/
    BufferedReader fin = null;

    /** Dump file output stream.*/
    PrintStream dump;
    

    /** Create a client to send requests to the Offline server.
     * @param host Host for Offline server.
     * @param port Port for Offline server.
     * @param xmlFile File to read request from.
     */
    public XMLTestClient(String host, int port, String xmlFile) {
	this.host = host;
	this.port = port;
	this.xmlFile = xmlFile;
    }

    public static void main(String args[]) {
	try {
	    new XMLTestClient(args[0], Integer.parseInt(args[1]), args[2]).exec();
	}  catch (Exception e) {
	    System.err.println("USAGE: java XMLTestClient <host> <port> <xmlFile>: "+e);
	    System.exit(1);
	}
	
    }
	
    public void exec() {
	
	Socket socket = null;

	try {
	    socket = new Socket(host, port);
	    System.err.println("Opened connection to: "+
			       socket.getInetAddress().getHostName()+
			       " : "+socket.getPort());
	} catch (IOException e) { 
	    error(CONNECT_ERROR, "Error opening socket connection: "+e);
	    return;
	}
	    
	try {
	    fin = new BufferedReader(new FileReader(xmlFile));
	    System.err.println("Opened file input stream");
	} catch (IOException e) {
	    error(FILE_ERROR, "Error opening request file: "+e);
	    return;
	}
	
	try {
	    out = new PrintStream(socket.getOutputStream()); 
	    System.err.println("Opened output stream to server");	    
	    in = new BufferedReader(new InputStreamReader(socket.getInputStream()));
	    System.err.println("Opened input stream from server");
	} catch (IOException e) {
	    error(IO_ERROR, "Error opening socket i/o streams: "+e);
	    return;
	}
	
	 // Keep reading from file.
	boolean done = false;
	String text = null;
	while (!done) {
	    try {
		text = fin.readLine();
		if (text == null) break;
		System.err.println("Read:["+text+"]");		
	    } catch (IOException e) {
		error(READ_ERROR, "Error reading from file : "+e);
		break;
	    }
	    
	    out.println(text);
	    
	    if (out.checkError())
		error(SEND_ERROR, "Error sending : ");
	    
	}
	
	System.err.println("Sending.....\n\n");
	System.err.println("---------------------------------------------"+
			   "\n        SERVER RESPONSE - START            "+ 
			   "\n---------------------------------------------");

	done = false;
	while (!done) { 
	    try {
		String reply = in.readLine();			
		if (reply == null) {
		    System.err.println("---------------------------------------------"+
				       "\n        SERVER RESPONSE - END              "+ 
				       "\n---------------------------------------------");
		    
		    return;
		}	
		System.err.println(reply);	
	    } catch (IOException e) {
		System.err.println("Read::Error reading from server: "+e);
		return;
	    }
	}
	
	
	try {
	    fin.close();
	    out.close();
	} catch (IOException e) {
	    System.err.println("Read::Error closing file or sending : "+e);
	    return;
	}
	
    }

    protected void error(int code, String message) {
	System.err.println("<p2ml>"+
			   "\n  <error>"+
			   "\n    <code>"+code+"</code>"+
			   "\n    <message>"+message+"</message>"+
			   "\n  </error>"+
			   "\n</p2ml>");
    }

}
