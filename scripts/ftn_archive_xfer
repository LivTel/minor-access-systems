#!/bin/csh

# --------------------------------------
# Archive transfer script.
# --------------------------------------
#
# Usage: archive_xfer [ test | send ] [ MMDD  ]
#
# e.g.   archive_xfer send 0321  -- Send for March 21
#
# e.g.   archive_xfer test       -- Test for current night
#
# --------------------------------------
#

#source /home/occ/.cshrc

source $DEPLOY_BIN/setup
source $DEPLOY_BIN/class_setup
source $DEPLOY_BIN/archive_xfer_setup

echo "SSL Archive Transfer Client Starting"

set nargs = ${#argv}

switch (${#argv})
    case 1:
    set mode = $1
    set od   = `date -d yesterday "+%m%d"`   
    breaksw
    case 2:
    set mode = $1
    set od   = $2
    breaksw
    default:
    echo "Usage: archive_xfer [ test | send ] [ MMDD  ]"
    exit 1
endsw

if ($mode == "test") then
    set test
    echo "Checking datestamp: $od "
endif

set dd = `date -u "+%Y%m%d"`
set ds = `date -u "+%Y-%m-%d %H:%M"`

set LOGFILE = $DEPLOY_LOG/archive_log_${dd}
set INFO    = $DEPLOY_TMP/archive_info

if (! -e $LOGFILE) then
    touch $LOGFILE
endif

if (! -e $INFO) then
    touch $INFO
endif


echo "Starting Archive Transfer at: $ds " >>& $LOGFILE

cd $ARCHIVE_HOME

# Where are the images (NFS mount).
set ARCHIVE_IMAGE_DIR = /mnt/rat-image
set ARCHIVE_FLAT_DIR = /mnt/rat-dprt/Flat

# Where are the extra files.
set ARCHIVE_EXTRA_LIST = $DEPLOY_TMP/archive_extra

#set ARCHIVE_IMAGE_DIR = /home/dev/tmp

# These should work.
set KEYSTORE     = "certs/pca.private"
set TRUSTSTORE   = "certs/itr.public"
set KEYPASS      = geronimo

# Check we have the key store (server's private key).
if (! -e $KEYSTORE) then   
    echo "Could not find Keystore: $KEYSTORE" >>& $LOGFILE
    exit 1
endif

# Check we have the trust store (clients' public keys).
if (! -e $TRUSTSTORE) then
    echo "Could not find Truststore: $TRUSTSTORE" >>& $LOGFILE
    exit 2
endif

# Check the certificate validity dates.
#$ARCHIVE_HOME/scripts/check_cert $KEYSTORE $KEYPASS >>& $LOGFILE
#$ARCHIVE_HOME/scripts/check_cert $TRUSTSTORE public >>& $LOGFILE

# Just an ID for this server - you can run several of these as required.
set ID = "ARCHIVE XFER [ FTNOCC -> FTNPROXY -> UH]"

# The Proxy relay.
set RELAY_HOST = 192.168.4.1
set RELAY_PORT = 6666

# The archive.
set ARCHIVE_HOST = kilo.ifa.hawaii.edu
set ARCHIVE_PORT = 6666

set BANDWIDTH = 5

set APP = ngat.net.SSLFileTransfer

# Command line delimeter - use any symbol which wont appear in either a filename
# or the ID etc.
set DD = @

# Check number of files to xfer.

if (! -e ${ARCHIVE_IMAGE_DIR}) then
    echo "Cannot locate archive image dir: ${ARCHIVE_IMAGE_DIR}" >>& $LOGFILE
    exit 3
endif

set cf = `ls -1 ${ARCHIVE_IMAGE_DIR}/c_*_1.fits | wc -l`
set sz = `ls -l ${ARCHIVE_IMAGE_DIR}/c_*_1.fits | awk '{count += $5} END { print (count/1000000)}'`

#set sz = `ls -l ${ARCHIVE_IMAGE_DIR} | awk '{count += $5} END { print (count/1000000000)}'`


echo "There are $cf files to transfer with total size: $sz MBytes" >>& $LOGFILE

# Files transferred
set ct = 0
# MBytes transferred
set tt = 0
# Files skipped
set sk = 0
# Failed to transfer
set ff = 0

echo "GO"

foreach file (${ARCHIVE_IMAGE_DIR}/c_[es]_*_0.fits)

    set raw = `echo $file | cut -d"_" -f1-6`

    echo "Raw file name is $raw " >>& $LOGFILE
    set rfile = ${raw}_0.fits
    set pfile = ${raw}_1.fits

    echo "Unprocessed: $rfile "  >>& $LOGFILE
    echo "Processed:   $pfile " >>& $LOGFILE
    if (-e $pfile) then

	echo "This file was processed - Assuming PLANETARIUM" >>& $LOGFILE
    
        set fs = `ls -s --block-size=1000000 $pfile | cut -d" " -f1 | awk '{print int($1)}'` 
   
	echo "Ready to Transfer: $pfile " >>& $LOGFILE
 
	set find = `cat $INFO | grep $pfile `
	
	if ($status == 0) then

	    echo "Already transferred $pfile - skip"  >>& $LOGFILE
	    @ sk++

	else

	    set dfile = $pfile:t

	    java -Dcpdelim=${DD} $APP ${DD}client ${DD}id $ID ${DD}key $KEYSTORE ${DD}pass $KEYPASS ${DD}trust $TRUSTSTORE \
	     ${DD}host $RELAY_HOST ${DD}port $RELAY_PORT ${DD}auth ${DD}band $BANDWIDTH \
	     ${DD}fwd $pfile ${DD}rhost $ARCHIVE_HOST ${DD}rport $ARCHIVE_PORT  ${DD}dest $dfile 

	    set ex = $status
	  
	    if ($ex == 0) then
		echo "Transferred: $pfile $fs MBytes" >>& $LOGFILE
		echo $pfile >>& $INFO
		@ ct++
		@ tt += $fs	
	    else
		echo "Transfer $pfile failed with status: $ex " >>& $LOGFILE
		@ ff++
	    endif
	endif

   else

	echo "This file was not processed - Assuming SCIENCE" >>& $LOGFILE
    
        set fs = `ls -s --block-size=1000000 $file | cut -d" " -f1 | awk '{print int($1)}'` 
   
	echo "Ready to Transfer: $rfile " >>& $LOGFILE
 
	set find = `cat $INFO | grep $rfile `
	
	if ($status == 0) then

	    echo "Already transferred $rfile - skip"  >>& $LOGFILE
	    @ sk++

	else

	    set dfile = $rfile:t

	    java -Dcpdelim=${DD} $APP ${DD}client ${DD}id $ID ${DD}key $KEYSTORE ${DD}pass $KEYPASS ${DD}trust $TRUSTSTORE \
	     ${DD}host $RELAY_HOST ${DD}port $RELAY_PORT ${DD}auth ${DD}band $BANDWIDTH \
	     ${DD}fwd $rfile ${DD}rhost $ARCHIVE_HOST ${DD}rport $ARCHIVE_PORT  ${DD}dest $dfile 

	    set ex = $status
	  
	    if ($ex == 0) then
		echo "Transferred: $rfile $fs MBytes" >>& $LOGFILE
		echo $rfile >>& $INFO
		@ ct++
		@ tt += $fs	
	    else
		echo "Transfer $rfile failed with status: $ex " >>& $LOGFILE
		@ ff++
	    endif
	endif

   endif



end


# Transfer the flat fields. I do not maintain logs of the total amount of data transfered
# etc, as is done for the actual image data. Other than that the transfer process if very similar.
# Note also that there we do not check in $LOGFILE because the filename will be the same every day
# This means that this will only work for a script that is called once a day. If we go over to 
# progressive transfer through the night as for coming back to ARI, this will have to be moved off into
# a separate script which only gets cron'ed once per day.
foreach file (${ARCHIVE_FLAT_DIR}/*_[1234].fits)
    set fs = `ls -s --block-size=1000000 $file | awk '{print int($1)}'`
    echo "Ready to Transfer: $file " >>& $LOGFILE
    set dfile = $file:t
    java -Dcpdelim=${DD} $APP ${DD}client ${DD}id $ID ${DD}key $KEYSTORE ${DD}pass $KEYPASS ${DD}trust $TRUSTSTORE \
             ${DD}host $RELAY_HOST ${DD}port $RELAY_PORT ${DD}auth ${DD}band $BANDWIDTH \
             ${DD}fwd $file ${DD}rhost $ARCHIVE_HOST ${DD}rport $ARCHIVE_PORT  ${DD}dest $dfile
            set ex = $status
    if ($ex == 0) then
      echo "Transferred: $file $fs MBytes" >>& $LOGFILE
    else
      echo "Transfer $file failed with status: $ex " >>& $LOGFILE
    endif
end


if (! ${?test}) then
    echo "" >>& $LOGFILE
    echo "Run statistics" >>& $LOGFILE
    echo "Total files: $cf " >>& $LOGFILE
    echo "Files tranferred this run: $ct " >>& $LOGFILE
    echo "Files skipped: $sk " >>& $LOGFILE
    echo "Total transfer $tt Mbytes" >>& $LOGFILE
    echo "Failed transfers: $ff ">>& $LOGFILE
endif

echo "Transfer run completed successfully" >>& $LOGFILE
